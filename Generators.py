#* A generator works at a time, So to call it, we have to create a new generator 

#1 Example Simple List Type
# def myfunc():
#     for num in range(14):
#         print(num)

# myfunc()    #Answer 1-13

#2 Example Return Exponent Type
# def myfunc():
#     for num in range(14):
#         return num ** num

# total = myfunc()  
# print(total)   #Answer 1

#3 Example Yield Type (Generator)
# def my_generator():
#     for num in range(50):   #a single number work at a time
#         yield num ** num

# for big_num in my_generator():
#     print(big_num)

#Answer: (1-49)
# 1
# 1
# 4
# 27
# 256
# 3125
# 46656
# 823543
# 16777216
# 387420489
# 10000000000
# 285311670611
# 8916100448256
# 302875106592253
# 11112006825558016
# 437893890380859375
# 18446744073709551616
# 827240261886336764177
# 39346408075296537575424
# 1978419655660313589123979
# 104857600000000000000000000
# 5842587018385982521381124421
# 341427877364219557396646723584
# 20880467999847912034355032910567
# 1333735776850284124449081472843776
# 88817841970012523233890533447265625
# 6156119580207157310796674288400203776
# 443426488243037769948249630619149892803
# 33145523113253374862572728253364605812736
# 2567686153161211134561828214731016126483469
# 205891132094649000000000000000000000000000000
# 17069174130723235958610643029059314756044734431
# 1461501637330902918203684832716283019655932542976
# 129110040087761027839616029934664535539337183380513
# 11756638905368616011414050501310355554617941909569536
# 1102507499354148695951786433413508348166942596435546875
# 106387358923716524807713475752456393740167855629859291136
# 10555134955777783414078330085995832946127396083370199442517
# 1075911801979993982060429252856123779115487368830416064610304
# 112595147462071192539789448988889059930192105219196517009951959
# 12089258196146291747061760000000000000000000000000000000000000000
# 1330877630632711998713399240963346255985889330161650994325137953641
# 150130937545296572356771972164254457814047970568738777235893533016064
# 17343773367030267519903781288812032158308062539012091953077767198995507
# 2050773823560610053645205609172376035486179836520607547294916966189367296
# 248063644451341145494649182395412689744530581492654164321720600128173828125
# 30680346300794274230660433647640397899788170645078853280082659754365153181696
# 3877924263464448622666648186154330754898344901344205917642325627886496385062863
# 500702078263459319174537025249570888246709955377400223021257741084821677152403456
# 66009724686219550843768321818371771650147004059278069406814190436565131829325062449     

#4 Example
# def my_generator():
#     for num in range(50):   #a single number work at a time
#         yield num ** num

# all_numbers = list(my_generator()) #saving it for later in all_number variable
# print(all_numbers)

# for big_num in my_generator():
#     print(big_num)

#Answer:
# [1, 1, 4, 27, 256, 3125, 46656, 823543, 16777216, 387420489, 10000000000, 285311670611, 8916100448256, 302875106592253, 11112006825558016, 437893890380859375, 18446744073709551616, 827240261886336764177, 39346408075296537575424, 1978419655660313589123979, 104857600000000000000000000, 5842587018385982521381124421, 341427877364219557396646723584, 20880467999847912034355032910567, 1333735776850284124449081472843776, 88817841970012523233890533447265625, 6156119580207157310796674288400203776, 443426488243037769948249630619149892803, 33145523113253374862572728253364605812736, 2567686153161211134561828214731016126483469, 205891132094649000000000000000000000000000000, 17069174130723235958610643029059314756044734431, 1461501637330902918203684832716283019655932542976, 129110040087761027839616029934664535539337183380513, 11756638905368616011414050501310355554617941909569536, 1102507499354148695951786433413508348166942596435546875, 106387358923716524807713475752456393740167855629859291136, 10555134955777783414078330085995832946127396083370199442517, 1075911801979993982060429252856123779115487368830416064610304, 112595147462071192539789448988889059930192105219196517009951959, 12089258196146291747061760000000000000000000000000000000000000000, 1330877630632711998713399240963346255985889330161650994325137953641, 150130937545296572356771972164254457814047970568738777235893533016064, 17343773367030267519903781288812032158308062539012091953077767198995507, 2050773823560610053645205609172376035486179836520607547294916966189367296, 248063644451341145494649182395412689744530581492654164321720600128173828125, 30680346300794274230660433647640397899788170645078853280082659754365153181696, 3877924263464448622666648186154330754898344901344205917642325627886496385062863, 500702078263459319174537025249570888246709955377400223021257741084821677152403456, 66009724686219550843768321818371771650147004059278069406814190436565131829325062449]

#5 Example
# def my_generator():
#     for num in range(50):   #a single number work at a time
#         yield num ** num

# all_numbers = list(my_generator()) #saving it for later in all_number variable
# print(all_numbers)

# for big_num in my_generator():
#     print(big_num)

# total = list(range(50))
# print(total)

#Answer:
# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]

#7 Example
def my_generator():
    for num in range(50):  
        yield num ** num

my_var_gen = my_generator()
all_numbers = list(my_var_gen) 
print(all_numbers)

for big_num in my_generator():
    print(big_num)

